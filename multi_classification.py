# -*- coding: utf-8 -*-
"""multi classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mob-hG61t8qnCc4Snbx7u6ovQ5EadRQw
"""

import numpy as np
import pandas as pd
import seaborn as sns

df = sns.load_dataset('iris')

df.head()

df.isnull().sum()

df['species'].value_counts()

df['species'] = df['species'].map({'setosa': 0,'versicolor':1,'virginica':2})

df.head()

x= df.iloc[:,:-1]
y= df.iloc[:,-1]

x.head()

y.head()

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=42)

from sklearn.linear_model import LogisticRegression

clf = LogisticRegression(multi_class='ovr')

clf.fit(X_test, y_test)

clf.score(X_test,y_test)

y_pred = clf.predict(X_test)

from sklearn.metrics import accuracy_score

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

from sklearn.metrics import classification_report

print(classification_report(y_test, y_pred))

#precision: it is the ratio of (true +ve /true +ve + false +ve)
# recall :it is the ratio of (true +ve /true +ve + false -ve)
#f1- score: 2 * (precision * recall) / (precision + recall). It is also known as harmonic mean
#support: it refers to the number of actual occurrences of each class in the dataset

clf = LogisticRegression(multi_class='multinomial',solver='saga')

clf.fit(X_test, y_test)

clf.score(X_test,y_test)

clf = LogisticRegression(multi_class='multinomial',solver='sag')

clf.fit(X_test, y_test)

clf.score(X_test,y_test)

clf = LogisticRegression(multi_class='multinomial',solver='lbfgs')

clf.fit(X_test, y_test)

clf.score(X_test,y_test)

clf = LogisticRegression(multi_class='multinomial',solver='newton-cg')

clf.fit(X_test, y_test)

clf.score(X_test,y_test)

clf = LogisticRegression(multi_class='multinomial',solver='lbfgs',max_iter=1000,n_jobs=-1, verbose=1)

clf.fit(X_test, y_test)

clf = LogisticRegression(multi_class='multinomial',solver='saga',penalty='l2',max_iter=4)

clf.fit(X_train, y_train)

clf.score(X_test,y_test)